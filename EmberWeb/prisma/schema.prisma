// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  officialID  String?   @unique
  posts       Post[]
  likes       Like[]    // Relation vers les likes
  comments    Comment[] // Relation vers les commentaires
  createdAt   DateTime  @default(now())
}

model Post {
  id           Int       @id @default(autoincrement())
  title        String
  content      String?
  mediaType    String?
  mediaUrl     String?
  mediaMimeType String?
  authorId     Int
  createdAt    DateTime  @default(now())

  author       User      @relation(fields: [authorId], references: [id])
  likes        Like[]    // Relation vers les likes
  comments     Comment[] // Relation vers les commentaires
}

model Like {
  id       Int  @id @default(autoincrement())
  userId   Int
  postId   Int
  createdAt DateTime @default(now())

  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // Un utilisateur ne peut liker qu'une fois par post
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}